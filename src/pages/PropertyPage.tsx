
import { useState, useEffect, useMemo } from 'react';
import { useSearchParams } from 'react-router-dom';
import PropertyCard from '@/components/property/PropertyCard';
import PropertyFilters from '@/components/property/PropertyFilters';
import { useAppStore } from '@/stores/useAppStore';
import { usePropertyFiltersStore } from '@/stores/usePropertyFiltersStore';
import { usePropertyListings } from '@/hooks/usePropertyListings';
import { 
  PropertyType,
  BuildingType,
  ConditionType,
  SortOption,
  PropertyFilterConfig,
} from '@/types/listingType';
import { Header } from '@/components/Header';
import { Footer } from '@/components/Footer';

interface DistrictData {
  id: string;
  name: {
    ru: string;
    kz: string;
  };
}

export const propertyFilterConfig: PropertyFilterConfig = {
  areaRangeMin: 10,
  areaRangeMax: 500,
  floorRangeMin: 1,
  floorRangeMax: 30,
  dealTypes: [
    { id: 'sale', label: { ru: '–ü—Ä–æ–¥–∞–∂–∞', kz: '–°–∞—Ç—É' } },
    { id: 'rent', label: { ru: '–ê—Ä–µ–Ω–¥–∞', kz: '–ñ–∞–ª“ì–∞ –∞–ª—É' } }
  ],
  segments: [
    { 
      id: 'residential', 
      label: { ru: '–ñ–∏–ª–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', kz: '–¢“±—Ä“ì—ã–Ω “Ø–π' },
      types: []
    },
    { 
      id: 'commercial', 
      label: { ru: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', kz: '–ö–æ–º–º–µ—Ä—Ü–∏—è–ª—ã“õ –∂—ã–ª–∂—ã–º–∞–π—Ç—ã–Ω –º“Ø–ª—ñ–∫' },
      types: []
    }
  ],
  residentialFilters: [],
  commercialFilters: [],
  generalFilters: []
};

export default function PropertyPage() {
  const { language } = useAppStore();
  const { filters, setFilters, resetFilters, activeFiltersCount } = usePropertyFiltersStore();
  const [searchParams, setSearchParams] = useSearchParams();
  const [districts, setDistricts] = useState<DistrictData[]>([]);
  
  // Use the optimized hook for property listings
  const { 
    listings, 
    loading, 
    error, 
    totalCount, 
    getPropertyListings 
  } = usePropertyListings();

  // Load districts (mock data for now)
  useEffect(() => {
    const mockDistricts: DistrictData[] = [
      { id: 'almaty-district', name: { ru: '–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω', kz: '–ê–ª–º–∞–ª—ã –∞—É–¥–∞–Ω—ã' } },
      { id: 'bostandyk-district', name: { ru: '–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π —Ä–∞–π–æ–Ω', kz: '–ë–æ—Å—Ç–∞–Ω–¥—ã“õ –∞—É–¥–∞–Ω—ã' } },
      { id: 'alatau-district', name: { ru: '–ê–ª–∞—Ç–∞—É—Å–∫–∏–π —Ä–∞–π–æ–Ω', kz: '–ê–ª–∞—Ç–∞—É –∞—É–¥–∞–Ω—ã' } },
    ];
    setDistricts(mockDistricts);
  }, []);

  // Load property listings when filters change
  useEffect(() => {
    console.log('üîÑ Loading property listings with filters:', filters);
    getPropertyListings(filters, filters.sortBy || 'newest', 50, 0);
  }, [filters, getPropertyListings]);

  // Initialize filters from URL
  useEffect(() => {
    const initialPropertyType = searchParams.get('type') as PropertyType || null;
    if (initialPropertyType) {
      setFilters({ 
        propertyTypes: initialPropertyType ? [initialPropertyType] : null 
      });
    }
  }, [searchParams, setFilters]);

  const updateUrlParams = (newFilters) => {
    const params = new URLSearchParams();
    
    if (newFilters.propertyTypes && newFilters.propertyTypes.length > 0) {
      params.set('type', newFilters.propertyTypes[0]);
    } else {
      params.delete('type');
    }
    
    setSearchParams(params);
  };

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
    updateUrlParams({...filters, ...newFilters});
  };

  const handleReset = () => {
    resetFilters();
    setSearchParams({});
  };

  const handleSearch = () => {
    console.log('üîç Search triggered with filters:', filters);
    getPropertyListings(filters, filters.sortBy || 'newest', 50, 0);
  };

  // Process listings to ensure compatibility with PropertyCard
  const processedListings = useMemo(() => {
    return listings.map(listing => ({
      ...listing,
      // Ensure proper data mapping for PropertyCard component
      imageUrl: listing.images && listing.images.length > 0 ? listing.images[0] : '/placeholder.svg',
      originalPrice: listing.regular_price || listing.discount_price || 0,
      discountPrice: listing.discount_price || listing.regular_price || 0,
      discount: listing.discount_percent || 0,
      city: {
        ru: '–ê–ª–º–∞—Ç—ã', // Can be enhanced to load from cities table
        kz: '–ê–ª–º–∞—Ç—ã'
      },
      categoryId: 'property',
      createdAt: listing.created_at,
      isFeatured: listing.is_premium || false,
      views: listing.views || 0,
    }));
  }, [listings]);

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-1">
        <div className="container mx-auto px-4 py-8">
          <PropertyFilters
            filters={filters}
            onFilterChange={handleFilterChange}
            onReset={handleReset}
            onSearch={handleSearch}
            districts={districts}
            activeFiltersCount={activeFiltersCount}
            config={propertyFilterConfig}
          />
          
          {/* Show error messages */}
          {error && (
            <div className="mb-4 p-4 bg-red-100 border border-red-400 text-red-700 rounded">
              {language === 'ru' ? '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:' : '–ñ“Ø–∫—Ç–µ—É “õ–∞—Ç–µ—Å—ñ:'} {error}
            </div>
          )}
          
          {/* Show results count */}
          <div className="mb-6">
            <p className="text-gray-600">
              {loading ? 
                (language === 'ru' ? '–ó–∞–≥—Ä—É–∂–∞–µ–º...' : '–ñ“Ø–∫—Ç–µ—É...') :
                `${language === 'ru' ? '–ù–∞–π–¥–µ–Ω–æ' : '–¢–∞–±—ã–ª–¥—ã'} ${totalCount || processedListings.length} ${language === 'ru' ? '–æ–±—ä—è–≤–ª–µ–Ω–∏–π' : '—Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É'}`
              }
            </p>
          </div>
          
          {/* Show loading or listings */}
          {loading ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary mx-auto"></div>
              <p className="mt-4 text-gray-600">
                {language === 'ru' ? '–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏...' : '–ñ—ã–ª–∂—ã–º–∞–π—Ç—ã–Ω –º“Ø–ª—ñ–∫ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã–Ω –∂“Ø–∫—Ç–µ–ø –∂–∞—Ç—ã—Ä–º—ã–∑...'}
              </p>
            </div>
          ) : (
            <div className="grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 mt-8">
              {processedListings.map(listing => (
                <PropertyCard key={listing.id} listing={listing} />
              ))}
            </div>
          )}
          
          {/* Show message when no listings found */}
          {!loading && processedListings.length === 0 && (
            <div className="text-center py-8">
              <p className="text-gray-500">
                {language === 'ru' ? '–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' : '–ñ—ã–ª–∂—ã–º–∞–π—Ç—ã–Ω –º“Ø–ª—ñ–∫ —Ö–∞–±–∞—Ä–ª–∞–Ω–¥—ã—Ä—É–ª–∞—Ä—ã —Ç–∞–±—ã–ª–º–∞–¥—ã'}
              </p>
              <p className="text-sm text-gray-400 mt-2">
                {language === 'ru' ? 
                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞' : 
                  '–°“Ø–∑–≥—ñ–ª–µ—Ä–¥—ñ ”©–∑–≥–µ—Ä—Ç—ñ–ø –∫”©—Ä—ñ“£—ñ–∑ –Ω–µ–º–µ—Å–µ –±–∞—Å“õ–∞ —ñ–∑–¥–µ—É –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑'
                }
              </p>
            </div>
          )}
        </div>
      </main>
      <Footer />
    </div>
  );
}
