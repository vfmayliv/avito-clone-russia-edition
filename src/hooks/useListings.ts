
import { useState } from 'react';
import { supabase, Listing } from '@/lib/supabase';
import { useSupabase } from '@/contexts/SupabaseContext';

// –¢–∏–ø—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
type ListingFilters = {
  categoryId?: number;
  cityId?: number;
  microdistrictId?: number;
  priceMin?: number;
  priceMax?: number;
  priceRange?: { min?: number; max?: number; };
  condition?: string;
  searchQuery?: string;
  isPremium?: boolean;
  isFree?: boolean;
};

// –¢–∏–ø—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
type SortOptions = 'newest' | 'price_asc' | 'price_desc' | 'discount';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç Zustand proxy –æ–±—ä–µ–∫—Ç–æ–≤
const cleanFilterValue = (value: any): any => {
  if (value && typeof value === 'object' && value._type === 'undefined') {
    return undefined;
  }
  if (value && typeof value === 'object' && value.value !== undefined) {
    return value.value;
  }
  return value;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
const cleanFilters = (filters: any): ListingFilters => {
  const cleaned: any = {};
  
  Object.keys(filters).forEach(key => {
    const value = cleanFilterValue(filters[key]);
    if (value !== undefined && value !== null && value !== '') {
      // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è priceRange
      if (key === 'priceRange' && typeof value === 'object') {
        const cleanedRange = {
          min: cleanFilterValue(value.min),
          max: cleanFilterValue(value.max)
        };
        // –î–æ–±–∞–≤–ª—è–µ–º priceRange —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        if (cleanedRange.min !== undefined || cleanedRange.max !== undefined) {
          cleaned[key] = cleanedRange;
        }
      } else {
        cleaned[key] = value;
      }
    }
  });
  
  return cleaned;
};

export function useListings() {
  const [listings, setListings] = useState<Listing[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { user } = useSupabase();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const getListings = async (
    filters: ListingFilters = {}, 
    sort: SortOptions = 'newest',
    limit: number = 100,
    offset: number = 0
  ) => {
    setLoading(true);
    setError(null);
    
    // –û—á–∏—â–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –æ—Ç Zustand proxy –æ–±—ä–µ–∫—Ç–æ–≤
    const cleanedFilters = cleanFilters(filters);
    console.log('üßπ –û—á–∏—â–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:', cleanedFilters);
    console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', cleanedFilters);
    
    try {
      let query = supabase
        .from('listings')
        .select(`
          *,
          cities(name_ru, name_kz),
          categories(name_ru, name_kz)
        `)
        .eq('status', 'active'); // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è

      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      if (cleanedFilters.categoryId) {
        console.log('üéØ –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', cleanedFilters.categoryId);
        query = query.eq('category_id', cleanedFilters.categoryId);
      }

      if (cleanedFilters.cityId) {
        console.log('üèôÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É:', cleanedFilters.cityId);
        query = query.eq('city_id', cleanedFilters.cityId);
      }

      if (cleanedFilters.microdistrictId) {
        console.log('üèòÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω—É:', cleanedFilters.microdistrictId);
        query = query.eq('microdistrict_id', cleanedFilters.microdistrictId);
      }

      // Handle priceRange filter
      if (cleanedFilters.priceRange) {
        const { min, max } = cleanedFilters.priceRange;
        if (min !== undefined && min > 0) {
          console.log('üí∞ –§–∏–ª—å—Ç—Ä –º–∏–Ω. —Ü–µ–Ω–∞:', min);
          query = query.gte('discount_price', min);
        }
        if (max !== undefined && max > 0) {
          console.log('üí∞ –§–∏–ª—å—Ç—Ä –º–∞–∫—Å. —Ü–µ–Ω–∞:', max);
          query = query.lte('discount_price', max);
        }
      } else {
        if (cleanedFilters.priceMin !== undefined) {
          console.log('üí∞ –§–∏–ª—å—Ç—Ä –º–∏–Ω. —Ü–µ–Ω–∞ (—Å—Ç–∞—Ä—ã–π):', cleanedFilters.priceMin);
          query = query.gte('discount_price', cleanedFilters.priceMin);
        }

        if (cleanedFilters.priceMax !== undefined) {
          console.log('üí∞ –§–∏–ª—å—Ç—Ä –º–∞–∫—Å. —Ü–µ–Ω–∞ (—Å—Ç–∞—Ä—ã–π):', cleanedFilters.priceMax);
          query = query.lte('discount_price', cleanedFilters.priceMax);
        }
      }

      if (cleanedFilters.searchQuery) {
        console.log('üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É:', cleanedFilters.searchQuery);
        query = query.ilike('title', `%${cleanedFilters.searchQuery}%`);
      }

      if (cleanedFilters.isPremium !== undefined) {
        console.log('‚≠ê –§–∏–ª—å—Ç—Ä –ø—Ä–µ–º–∏—É–º:', cleanedFilters.isPremium);
        query = query.eq('is_premium', cleanedFilters.isPremium);
      }

      if (cleanedFilters.isFree !== undefined) {
        console.log('üÜì –§–∏–ª—å—Ç—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ:', cleanedFilters.isFree);
        query = query.eq('is_free', cleanedFilters.isFree);
      }

      if (cleanedFilters.condition && cleanedFilters.condition !== 'any') {
        console.log('üì¶ –§–∏–ª—å—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', cleanedFilters.condition);
        query = query.ilike('description', `%${cleanedFilters.condition}%`);
      }

      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      switch (sort) {
        case 'newest':
          query = query.order('created_at', { ascending: false });
          break;
        case 'price_asc':
          query = query.order('discount_price', { ascending: true });
          break;
        case 'price_desc':
          query = query.order('discount_price', { ascending: false });
          break;
        case 'discount':
          query = query.order('discount_percent', { ascending: false });
          break;
      }

      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      query = query.range(offset, offset + limit - 1);

      console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Supabase...');
      const { data, error, count } = await query;

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Supabase:', error);
        throw error;
      }

      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (${data?.length || 0} –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö):`, data);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (cleanedFilters.categoryId) {
        const { count: totalCount } = await supabase
          .from('listings')
          .select('*', { count: 'exact', head: true })
          .eq('category_id', cleanedFilters.categoryId)
          .eq('status', 'active');
        
        console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${cleanedFilters.categoryId}:`, totalCount);
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      if (data && data.length > 0) {
        console.log('üìã –ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', data[0]);
        console.log('üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', data.map(d => d.category_id));
      } else {
        console.warn('‚ö†Ô∏è –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞...');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const { data: allListings } = await supabase
          .from('listings')
          .select('id, title, category_id, status')
          .limit(5);
        
        console.log('üîç –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ (–ø–µ—Ä–≤—ã–µ 5):', allListings);
      }

      setListings(data || []);
      return data || [];
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', err);
      return [];
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ ID
  const getListingById = async (id: string) => {
    try {
      const { data, error } = await supabase
        .from('listings')
        .select(`
          *,
          cities(name_ru, name_kz),
          categories(name_ru, name_kz)
        `)
        .eq('id', id)
        .single();

      if (error) {
        throw error;
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      await supabase
        .from('listings')
        .update({ views: (data.views || 0) + 1 })
        .eq('id', id);

      return data;
    } catch (err: any) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${id}:`, err);
      return null;
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const createListing = async (listingData: Omit<Listing, 'id' | 'created_at' | 'updated_at' | 'views'>) => {
    if (!user) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return null;
    }

    try {
      const { data, error } = await supabase
        .from('listings')
        .insert({
          ...listingData,
          user_id: user.id,
          views: 0,
        })
        .select()
        .single();

      if (error) {
        throw error;
      }

      return data;
    } catch (err: any) {
      setError(err.message);
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', err);
      return null;
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const updateListing = async (id: string, listingData: Partial<Listing>) => {
    if (!user) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return null;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      const { data: existingListing, error: fetchError } = await supabase
        .from('listings')
        .select('user_id')
        .eq('id', id)
        .single();

      if (fetchError) {
        throw fetchError;
      }

      if (existingListing.user_id !== user.id) {
        setError('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
        return null;
      }

      const { data, error } = await supabase
        .from('listings')
        .update({
          ...listingData,
          updated_at: new Date().toISOString(),
        })
        .eq('id', id)
        .select()
        .single();

      if (error) {
        throw error;
      }

      return data;
    } catch (err: any) {
      setError(err.message);
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${id}:`, err);
      return null;
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const deleteListing = async (id: string) => {
    if (!user) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return false;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      const { data: existingListing, error: fetchError } = await supabase
        .from('listings')
        .select('user_id')
        .eq('id', id)
        .single();

      if (fetchError) {
        throw fetchError;
      }

      if (existingListing.user_id !== user.id) {
        setError('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
        return false;
      }

      const { error } = await supabase
        .from('listings')
        .delete()
        .eq('id', id);

      if (error) {
        throw error;
      }

      return true;
    } catch (err: any) {
      setError(err.message);
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${id}:`, err);
      return false;
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserListings = async () => {
    if (!user) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return [];
    }

    try {
      const { data, error } = await supabase
        .from('listings')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (error) {
        throw error;
      }

      return data;
    } catch (err: any) {
      setError(err.message);
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
      return [];
    }
  };

  return {
    listings,
    loading,
    error,
    getListings,
    getListingById,
    createListing,
    updateListing,
    deleteListing,
    getUserListings,
  };
}
